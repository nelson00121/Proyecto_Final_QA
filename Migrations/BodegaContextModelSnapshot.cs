// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProFinQA.Data;

#nullable disable

namespace ProFinQA.Migrations
{
    [DbContext(typeof(BodegaContext))]
    partial class BodegaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProFinQA.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "id_usuario");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Asignacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaFin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_fin")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_inicio");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empleado");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<string>("Observacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("observacion")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmpleado" }, "id_empleado");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo");

                    b.ToTable("asignacion", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Causa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descripcion")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("causa", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Electronico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Conectividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('bluetooth','wifi','gsm','nfc','bluetooth_wifi','bluetooth_gsm','bluetooth_nfc','wifi_gsm','wifi_nfc','gsm_nfc','bluetooth_wifi_gsm','bluetooth_wifi_nfc','bluetooth_gsm_nfc','wifi_gsm_nfc','bluetooth_wifi_gsm_nfc','ninguno')")
                        .HasColumnName("conectividad")
                        .HasDefaultValueSql("'''ninguno'''");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<string>("Imei")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("imei")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Operador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('starlink','claro','tigo','comnet','verasat','telecom','ninguno')")
                        .HasColumnName("operador")
                        .HasDefaultValueSql("'''ninguno'''");

                    b.Property<string>("SistemaOperativo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sistema_operativo")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo")
                        .HasDatabaseName("id_equipo1");

                    b.ToTable("electronico", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('activo','inactivo','vacaciones')")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'''activo'''");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_usuario");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("primer_apellido");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("primer_nombre");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("segundo_apellido");

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("segundo_nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "id_usuario")
                        .IsUnique()
                        .HasDatabaseName("id_usuario1");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('activo','inactivo','mantenimiento','suspendido')")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'''activo'''");

                    b.Property<string>("Extras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("extras")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("FechaCommit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_commit")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int?>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empleado")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_marca");

                    b.Property<string>("Identificador")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("identificador")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serie");

                    b.Property<string>("TipoAlimentacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('110v','220v','diesel','regular','super','bateria','ninguna')")
                        .HasColumnName("tipo_alimentacion")
                        .HasDefaultValueSql("'''ninguna'''");

                    b.Property<double>("Valor")
                        .HasColumnType("double(10,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmpleado" }, "id_empleado")
                        .HasDatabaseName("id_empleado1");

                    b.HasIndex(new[] { "IdMarca" }, "id_marca");

                    b.ToTable("equipo", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Herramientum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("material");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo")
                        .HasDatabaseName("id_equipo2");

                    b.ToTable("herramienta", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("IdReporte")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_reporte");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdReporte" }, "id_reporte");

                    b.ToTable("imagen", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.LogMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("accion");

                    b.Property<string>("Descripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("descripcion")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("FechaCommit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_commit")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "id_usuario")
                        .HasDatabaseName("id_usuario2");

                    b.ToTable("log_movimiento", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Mantenimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<double?>("Costo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double(10,2)")
                        .HasColumnName("costo")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Descripcion")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("descripcion")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo")
                        .HasDatabaseName("id_equipo3");

                    b.ToTable("mantenimiento", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Mobiliario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<float>("Altura")
                        .HasColumnType("float(8,2)")
                        .HasColumnName("altura");

                    b.Property<float>("Ancho")
                        .HasColumnType("float(8,2)")
                        .HasColumnName("ancho");

                    b.Property<int?>("CantidadPiezas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("cantidad_piezas")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("material");

                    b.Property<float>("Profundidad")
                        .HasColumnType("float(8,2)")
                        .HasColumnName("profundidad");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo")
                        .HasDatabaseName("id_equipo4");

                    b.ToTable("mobiliario", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Reporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaCommit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_commit")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int>("IdCausa")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_causa");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empleado");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<string>("Observacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("observacion")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCausa" }, "id_causa");

                    b.HasIndex(new[] { "IdEmpleado" }, "id_empleado")
                        .HasDatabaseName("id_empleado2");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo")
                        .HasDatabaseName("id_equipo5");

                    b.ToTable("reporte", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaCommit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_commit")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Usuario1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usuario");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Usuario1" }, "usuario")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.UsuarioRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_asignacion")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int>("RoleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("role_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int(11)")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.HasIndex(new[] { "UsuarioId" }, "usuario_id");

                    b.ToTable("usuario_role", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Cilindrada")
                        .HasColumnType("int(11)")
                        .HasColumnName("cilindrada");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_equipo");

                    b.Property<int>("Modelo")
                        .HasColumnType("int(11)")
                        .HasColumnName("modelo");

                    b.Property<string>("NoMotor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("no_motor");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("placa");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEquipo" }, "id_equipo")
                        .HasDatabaseName("id_equipo6");

                    b.ToTable("vehiculo", (string)null);
                });

            modelBuilder.Entity("ProFinQA.Models.Area", b =>
                {
                    b.HasOne("ProFinQA.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("area_ibfk_1");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Asignacion", b =>
                {
                    b.HasOne("ProFinQA.Models.Empleado", "IdEmpleadoNavigation")
                        .WithMany("Asignacions")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("asignacion_ibfk_2");

                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Asignacions")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("asignacion_ibfk_1");

                    b.Navigation("IdEmpleadoNavigation");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Electronico", b =>
                {
                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Electronicos")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("electronico_ibfk_1");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Empleado", b =>
                {
                    b.HasOne("ProFinQA.Models.Usuario", "IdUsuarioNavigation")
                        .WithOne("Empleado")
                        .HasForeignKey("ProFinQA.Models.Empleado", "IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("empleado_ibfk_1");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Equipo", b =>
                {
                    b.HasOne("ProFinQA.Models.Empleado", "IdEmpleadoNavigation")
                        .WithMany("Equipos")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("equipo_ibfk_2");

                    b.HasOne("ProFinQA.Models.Marca", "IdMarcaNavigation")
                        .WithMany("Equipos")
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("equipo_ibfk_1");

                    b.Navigation("IdEmpleadoNavigation");

                    b.Navigation("IdMarcaNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Herramientum", b =>
                {
                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Herramienta")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("herramienta_ibfk_1");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Imagen", b =>
                {
                    b.HasOne("ProFinQA.Models.Reporte", "IdReporteNavigation")
                        .WithMany("Imagens")
                        .HasForeignKey("IdReporte")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("imagen_ibfk_1");

                    b.Navigation("IdReporteNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.LogMovimiento", b =>
                {
                    b.HasOne("ProFinQA.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("LogMovimientos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("log_movimiento_ibfk_1");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Mantenimiento", b =>
                {
                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("mantenimiento_ibfk_1");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Mobiliario", b =>
                {
                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Mobiliarios")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("mobiliario_ibfk_1");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Reporte", b =>
                {
                    b.HasOne("ProFinQA.Models.Causa", "IdCausaNavigation")
                        .WithMany("Reportes")
                        .HasForeignKey("IdCausa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("reporte_ibfk_1");

                    b.HasOne("ProFinQA.Models.Empleado", "IdEmpleadoNavigation")
                        .WithMany("Reportes")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("reporte_ibfk_3");

                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Reportes")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("reporte_ibfk_2");

                    b.Navigation("IdCausaNavigation");

                    b.Navigation("IdEmpleadoNavigation");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.UsuarioRole", b =>
                {
                    b.HasOne("ProFinQA.Models.Role", "Role")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("usuario_role_ibfk_2");

                    b.HasOne("ProFinQA.Models.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("usuario_role_ibfk_1");

                    b.Navigation("Role");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProFinQA.Models.Vehiculo", b =>
                {
                    b.HasOne("ProFinQA.Models.Equipo", "IdEquipoNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("vehiculo_ibfk_1");

                    b.Navigation("IdEquipoNavigation");
                });

            modelBuilder.Entity("ProFinQA.Models.Causa", b =>
                {
                    b.Navigation("Reportes");
                });

            modelBuilder.Entity("ProFinQA.Models.Empleado", b =>
                {
                    b.Navigation("Asignacions");

                    b.Navigation("Equipos");

                    b.Navigation("Reportes");
                });

            modelBuilder.Entity("ProFinQA.Models.Equipo", b =>
                {
                    b.Navigation("Asignacions");

                    b.Navigation("Electronicos");

                    b.Navigation("Herramienta");

                    b.Navigation("Mantenimientos");

                    b.Navigation("Mobiliarios");

                    b.Navigation("Reportes");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("ProFinQA.Models.Marca", b =>
                {
                    b.Navigation("Equipos");
                });

            modelBuilder.Entity("ProFinQA.Models.Reporte", b =>
                {
                    b.Navigation("Imagens");
                });

            modelBuilder.Entity("ProFinQA.Models.Role", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("ProFinQA.Models.Usuario", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Empleado");

                    b.Navigation("LogMovimientos");

                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
